Qflow synthesis logfile created on Thu Mar 28 07:17:42 KST 2024
Running yosys for verilog parsing and synthesis
yosys  -s fir_pe.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38+88 (git sha1 38f1b0b12, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `fir_pe.ys' --

1. Executing Liberty frontend: /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v
Parsing Verilog input from `/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v' to AST representation.
Generating RTLIL representation for module `\fir_pe'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \fir_pe

3.1.2. Analyzing design hierarchy..
Top module:  \fir_pe
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:63$8 in module fir_pe.
Marked 3 switch rules as full_case in process $proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:43$4 in module fir_pe.
Marked 1 switch rules as full_case in process $proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:36$3 in module fir_pe.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 8 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~11 debug messages>

3.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:63$8'.
     1/8: $4\Yout[3:0]
     2/8: $4\Xout[3:0]
     3/8: $3\Yout[3:0]
     4/8: $3\Xout[3:0]
     5/8: $2\Yout[3:0]
     6/8: $2\Xout[3:0]
     7/8: $1\Yout[3:0]
     8/8: $1\Xout[3:0]
Creating decoders for process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:54$5'.
     1/2: $0\_y[15:0]
     2/2: $0\y[15:0]
Creating decoders for process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:43$4'.
     1/4: $0\Yin0[3:0]
     2/4: $0\Yin1[3:0]
     3/4: $0\Yin2[3:0]
     4/4: $0\Yin3[3:0]
Creating decoders for process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:36$3'.
     1/2: $0\XinH[3:0]
     2/2: $0\XinL[3:0]
Creating decoders for process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:23$2'.

3.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fir_pe.\Xout' from process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:63$8'.
No latch inferred for signal `\fir_pe.\Yout' from process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:63$8'.

3.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fir_pe.\y' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:54$5'.
  created $dff cell `$procdff$106' with positive edge clock.
Creating register for signal `\fir_pe.\_y' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:54$5'.
  created $dff cell `$procdff$107' with positive edge clock.
Creating register for signal `\fir_pe.\Yin3' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:43$4'.
  created $dff cell `$procdff$108' with positive edge clock.
Creating register for signal `\fir_pe.\Yin2' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:43$4'.
  created $dff cell `$procdff$109' with positive edge clock.
Creating register for signal `\fir_pe.\Yin1' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:43$4'.
  created $dff cell `$procdff$110' with positive edge clock.
Creating register for signal `\fir_pe.\Yin0' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:43$4'.
  created $dff cell `$procdff$111' with positive edge clock.
Creating register for signal `\fir_pe.\XinL' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:36$3'.
  created $dff cell `$procdff$112' with positive edge clock.
Creating register for signal `\fir_pe.\XinH' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:36$3'.
  created $dff cell `$procdff$113' with positive edge clock.
Creating register for signal `\fir_pe.\i' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:23$2'.
  created $dff cell `$procdff$114' with positive edge clock.
Creating register for signal `\fir_pe.\LoadCtl' using process `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:23$2'.
  created $dff cell `$procdff$115' with positive edge clock.

3.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:63$8'.
Removing empty process `fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:63$8'.
Found and cleaned up 1 empty switch in `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:54$5'.
Removing empty process `fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:54$5'.
Found and cleaned up 4 empty switches in `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:43$4'.
Removing empty process `fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:43$4'.
Found and cleaned up 2 empty switches in `\fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:36$3'.
Removing empty process `fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:36$3'.
Removing empty process `fir_pe.$proc$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:23$2'.
Cleaned up 11 empty switches.

3.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.
<suppressed ~3 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..
Removed 1 unused cells and 57 unused wires.
<suppressed ~3 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module fir_pe...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$13.
    dead port 1/2 on $mux $procmux$16.
    dead port 1/2 on $mux $procmux$19.
    dead port 1/2 on $mux $procmux$33.
    dead port 1/2 on $mux $procmux$36.
    dead port 1/2 on $mux $procmux$51.
    dead port 1/2 on $mux $procmux$57.
Removed 7 multiplexer ports.
<suppressed ~10 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$113 ($dff) from module fir_pe (D = \Xin, Q = \XinH).
Adding EN signal on $procdff$112 ($dff) from module fir_pe (D = \Xin, Q = \XinL).
Adding EN signal on $procdff$111 ($dff) from module fir_pe (D = \Yin, Q = \Yin0).
Adding EN signal on $procdff$110 ($dff) from module fir_pe (D = \Yin, Q = \Yin1).
Adding EN signal on $procdff$109 ($dff) from module fir_pe (D = \Yin, Q = \Yin2).
Adding EN signal on $procdff$108 ($dff) from module fir_pe (D = \Yin, Q = \Yin3).
Adding EN signal on $procdff$107 ($dff) from module fir_pe (D = $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:57$7_Y, Q = \_y).
Adding EN signal on $procdff$106 ($dff) from module fir_pe (D = \_y, Q = \y).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..
Removed 15 unused cells and 15 unused wires.
<suppressed ~16 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.8.16. Rerunning OPT passes. (Maybe there is more to do..)

3.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

3.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.8.20. Executing OPT_DFF pass (perform DFF optimizations).

3.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

3.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.8.23. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module fir_pe:
  creating $macc model for $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:57$7 ($add).
  creating $macc model for $mul$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:57$6 ($mul).
  merging $macc model for $mul$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:57$6 into $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:57$7.
  creating $macc cell for $add$/home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/source/fir_pe.v:57$7: $auto$alumacc.cc:365:replace_macc$146
  created 0 $alu and 1 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

3.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

3.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

3.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.
<suppressed ~2 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper maccmap for cells of type $macc.
  add { \XinH \XinL } * \Cin (8x8 bits, unsigned)
  add { \Yin3 \Yin2 \Yin1 \Yin0 } (16 bits, unsigned)
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~368 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.
<suppressed ~377 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..
Removed 30 unused cells and 122 unused wires.
<suppressed ~31 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\fir_pe' to `<abc-temp-dir>/input.blif'..
Extracted 452 gates and 504 wires to a netlist network with 52 inputs and 27 outputs.

3.22.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:       16
ABC RESULTS:               NOT cells:       11
ABC RESULTS:              NAND cells:       33
ABC RESULTS:               AND cells:       52
ABC RESULTS:             ORNOT cells:       13
ABC RESULTS:                OR cells:       48
ABC RESULTS:               NOR cells:       10
ABC RESULTS:            ANDNOT cells:      131
ABC RESULTS:              XNOR cells:       35
ABC RESULTS:               XOR cells:      111
ABC RESULTS:        internal signals:      425
ABC RESULTS:           input signals:       52
ABC RESULTS:          output signals:       27
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 152 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \fir_pe

3.24.2. Analyzing design hierarchy..
Top module:  \fir_pe
Removed 0 unused modules.

3.25. Printing statistics.

=== fir_pe ===

   Number of wires:                461
   Number of wire bits:            644
   Number of public wires:          19
   Number of public wire bits:     112
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                521
     $_ANDNOT_                     131
     $_AND_                         52
     $_DFFE_PP_                     56
     $_DFF_P_                        5
     $_MUX_                         16
     $_NAND_                        33
     $_NOR_                         10
     $_NOT_                         11
     $_ORNOT_                       13
     $_OR_                          48
     $_XNOR_                        35
     $_XOR_                        111

3.26. Executing CHECK pass (checking for obvious problems).
Checking module fir_pe...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=1584.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\fir_pe':
  mapped 61 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\fir_pe' to `<abc-temp-dir>/input.blif'..
Extracted 516 gates and 593 wires to a netlist network with 77 inputs and 64 outputs.

6.1.1. Executing ABC.
Running ABC command: "/usr/local/share/qflow/bin/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "etri05_stdcells" from "/usr/local/share/qflow/tech/etri050/etri05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.51 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            NOR3X1 cells:        5
ABC RESULTS:           OAI22X1 cells:        6
ABC RESULTS:             OR2X2 cells:        6
ABC RESULTS:            XOR2X1 cells:       10
ABC RESULTS:           XNOR2X1 cells:        7
ABC RESULTS:            AND2X2 cells:       41
ABC RESULTS:           AOI22X1 cells:       19
ABC RESULTS:           NAND3X1 cells:      158
ABC RESULTS:             INVX1 cells:      146
ABC RESULTS:            NOR2X1 cells:       34
ABC RESULTS:           AOI21X1 cells:      112
ABC RESULTS:           NAND2X1 cells:      173
ABC RESULTS:           OAI21X1 cells:      211
ABC RESULTS:        internal signals:      452
ABC RESULTS:           input signals:       77
ABC RESULTS:          output signals:       64
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 585 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port fir_pe.Cin: Missing option -inpad.
Don't map input port fir_pe.Rdy: Missing option -inpad.
Mapping port fir_pe.Vld using BUFX2.
Don't map input port fir_pe.Xin: Missing option -inpad.
Mapping port fir_pe.Xout using BUFX2.
Don't map input port fir_pe.Yin: Missing option -inpad.
Mapping port fir_pe.Yout using BUFX2.
Don't map input port fir_pe.clk: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

10.9. Rerunning OPT passes. (Maybe there is more to do..)

10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fir_pe..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fir_pe.
Performed a total of 0 changes.

10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fir_pe'.
Removed a total of 0 cells.

10.13. Executing OPT_DFF pass (perform DFF optimizations).

10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fir_pe..

10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fir_pe.

10.16. Finished OPT passes. (There is nothing left to do.)

11. Executing Verilog backend.

11.1. Executing BMUXMAP pass.

11.2. Executing DEMUXMAP pass.
Dumping module `\fir_pe'.

12. Printing statistics.

=== fir_pe ===

   Number of wires:                939
   Number of wire bits:           1020
   Number of public wires:         939
   Number of public wire bits:    1020
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                998
     AND2X2                         41
     AOI21X1                       112
     AOI22X1                        19
     BUFX2                           9
     DFFPOSX1                       61
     INVX1                         146
     NAND2X1                       173
     NAND3X1                       158
     NOR2X1                         34
     NOR3X1                          5
     OAI21X1                       211
     OAI22X1                         6
     OR2X2                           6
     XNOR2X1                         7
     XOR2X1                         10

End of script. Logfile hash: 05f45f62f3, CPU: user 0.22s system 0.00s, MEM: 18.02 MB peak
Yosys 0.38+88 (git sha1 38f1b0b12, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 48% 2x abc (0 sec), 11% 24x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef
Running vlogFanout
vlogFanout -l 300 -c 75 -I fir_pe_nofanout -s nullstring -p /usr/local/share/qflow/tech/etri050/etri05_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y fir_pe_mapped.v fir_pe_sized.v

vlogFanout for qflow 1.4.100
Parsing library "etri05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Top internal fanout is 35 (load 1345.12) from node LoadCtl[0],
driven by DFFPOSX1 with strength 549.757 (fF driven at latency 300)
Top fanout load-to-strength ratio is 5.30385 (latency = 1591.16 ps)
Top input node fanout is 61 (load 3045.67) from node clk.
0 gates exceed specified minimum load.
26 buffers were added.
Warning 1: load of 199.039 is 1.06444 times greater than strongest gate XOR2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 188.169 is 1.14027 times greater than strongest gate OAI21X1
Warning 3: load of 207.752 is 1.26259 times greater than strongest gate NAND3X1
Warning 4: load of 213.064 is 1.29488 times greater than strongest gate NAND3X1
Warning 5: load of 223.575 is 1.35875 times greater than strongest gate NAND3X1
Warning 7: load of 259.117 is 1.57476 times greater than strongest gate NAND3X1
Warning 17: load of 1355.12 is 2.46494 times greater than strongest gate DFFPOSX1
9 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 949    	Out: 940    	-9
	"2" gates	In: 75    	Out: 82    	+7

20 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 949    	Out: 940    	-9
	"2" gates	In: 75    	Out: 82    	+7

Number of gates changed: 0
Running vlog2Verilog for antenna cell mapping.
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef 
   -o fir_pe.v fir_pe_sized.v

Generating RTL verilog and SPICE netlist file in directory
	 /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/synthesis
Files:
   Verilog: /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/synthesis/fir_pe.rtl.v
   Verilog: /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/synthesis/fir_pe.rtlnopwr.v
   Verilog: /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/synthesis/fir_pe.rtlbb.v
   Spice:   /home/goodkook/ETRI050_DesignKit/devel/Ref_Design/FIR8/2_Splited_IO/synthesis/fir_pe.spc

Running vlog2Verilog.
vlog2Verilog -c -v vdd -g gnd  -l /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef 
	-o fir_pe.rtl.v
   fir_pe.v
vlog2Verilog -c -p -v vdd -g gnd  -l /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef 
	-o fir_pe.rtlnopwr.v
   fir_pe.v
/usr/local/share/qflow/bin/vlog2Verilog -c -p -b -n -v vdd -g gnd  -l /usr/local/share/qflow/tech/etri050/etri050_stdcells.lef
   -o fir_pe.rtlbb.v
Running vlog2Spice.
vlog2Spice -i -l  /usr/local/share/qflow/tech/etri050/etri050_stdcells.sp -o fir_pe.spc fir_pe.rtl.v
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/etri050/etri05_stdcells.lib" fir_pe.spc fir_pe.xspice

Synthesis script ended on Thu Mar 28 07:17:43 KST 2024
